Lab task 1:
class Car:
    def __init__(self, make, model, year, mileage=0):
        # Constructor to initialize the car's attributes
        self.make = make
        self.model = model
        self.year = year
        self.mileage = mileage
    
    def display_info(self):
        # Displays the car's information
        print(f"Car Information:\nMake: {self.make}\nModel: {self.model}\nYear: {self.year}\nMileage: {self.mileage} miles")
    
    def drive(self, miles):
        # Increases the mileage by the specified number of miles
        self.mileage += miles
        print(f"The car has driven {miles} miles. Total mileage is now {self.mileage} miles.")

# Example usage:
my_car = Car("Toyota", "Corolla", 2020)  # Creating a car object
my_car.display_info()  # Display the car's information

my_car.drive(100)  # Driving the car for 100 miles
my_car.display_info()  # Display updated information

Lab task 2:
class Student:
    def __init__(self, name, age):
        # Constructor to initialize the student's attributes
        self.name = name
        self.age = age
        self.marks = []
    
    def add_marks(self, marks):
        # Adds a list of marks to the student's marks list
        self.marks.extend(marks)
    
    def average_marks(self):
        # Calculates and returns the average of the student's marks
        if self.marks:
            return sum(self.marks) / len(self.marks)
        else:
            return 0  # Return 0 if no marks are available
    
    def display_info(self):
        # Displays the student's information (name, age, average marks)
        avg_marks = self.average_marks()
        print(f"Student Information:\nName: {self.name}\nAge: {self.age}\nAverage Marks: {avg_marks:.2f}")

# Example usage:
student = Student("Alice", 20)  # Creating a student object
student.add_marks([85, 90, 78, 92])  # Adding marks
student.display_info()  # Displaying student information

Lab task 3:
class BankAccount:
    def __init__(self, account_holder, balance=0):
        # Constructor to initialize the account holder's name and balance
        self.account_holder = account_holder
        self.balance = balance
    
    def deposit(self, amount):
        # Deposits an amount into the account
        if amount > 0:
            self.balance += amount
            print(f"Deposited ${amount}. New balance is ${self.balance}.")
        else:
            print("Deposit amount must be positive.")
    
    def withdraw(self, amount):
        # Withdraws an amount from the account if there are sufficient funds
        if amount > 0:
            if amount <= self.balance:
                self.balance -= amount
                print(f"Withdrew ${amount}. New balance is ${self.balance}.")
            else:
                print("Insufficient funds.")
        else:
            print("Withdrawal amount must be positive.")
    
    def display_balance(self):
        # Displays the current balance of the account
        print(f"Account Holder: {self.account_holder}\nCurrent Balance: ${self.balance}")

# Example usage:
account = BankAccount("John Doe", 500)  # Creating a bank account object
account.display_balance()  # Display initial balance

account.deposit(200)  # Depositing money into the account
account.withdraw(150)  # Withdrawing money from the account
account.display_balance()  # Display updated balance
